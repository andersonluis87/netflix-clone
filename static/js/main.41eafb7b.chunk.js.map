{"version":3,"sources":["MovieDB.js","components/Header/index.js","components/MovieRow/index.js","components/FeaturedMovie/index.js","App.js","index.js"],"names":["API_KEY","LANGUAGE","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","id","type","info","success","dark","className","href","src","changeFeaturedMovie","useState","scrollX","setScrollX","onClick","x","Math","round","window","innerWidth","style","fontSize","listWidth","results","length","marginLeft","width","map","item","key","poster_path","alt","original_title","console","log","firstDate","first_air_date","Date","release_date","genres","i","name","join","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","movieList","setMovieList","featuredData","setFeaturedData","darkHeader","setDarkHeader","useEffect","MovieDB","list","setRandomFeaturedMovie","loadAll","setFeaturedMovie","featuredMovie","mediaType","media_type","featuredMovieInfo","originals","filter","randomItem","floor","random","scrollListener","scrollY","addEventListener","removeEventListener","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41eafb7b.chunk.js","sourcesContent":["// https://api.themoviedb.org/3/movie/550?api_key=8d9e7111a0dae3255eb3976e8854ba05&language=pt-BR\nconst API_BASE = 'https://api.themoviedb.org/3/';\nconst API_KEY = '8d9e7111a0dae3255eb3976e8854ba05';\nconst LANGUAGE = 'pt-BR';\nconst NETFLIX_NETWORK_PARAM = 'with_network=213'\n\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n\n    return json;\n}\n\nexport default {\n    getHomeList: async  () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await basicFetch(`discover/tv?${NETFLIX_NETWORK_PARAM}&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`trending/all/week?language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await basicFetch(`movie/top_rated?language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch(`discover/movie?with_genres=28&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch(`discover/movie?with_genres=35&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`discover/movie?with_genres=27&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`discover/movie?with_genres=10749&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await basicFetch(`discover/movie?with_genres=99&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },                                                                                                \n        ]\n    },\n    getMovieInfo: async (id, type) => {\n        let info = {};\n\n        if (id) {\n            switch(type) {\n                case 'movie': \n                    info = await basicFetch(`movie/${id}?language=${LANGUAGE}&api_key=${API_KEY}`);\n                    break;\n                case 'tv':\n                    info = await basicFetch(`tv/${id}?language=${LANGUAGE}&api_key=${API_KEY}`);\n                    break;\n                default:\n                    info = {};\n            }\n        }\n        \n        //handling media type movie that does not contain such attribute\n        if (type === 'tv' && info?.success === false) {\n            info = await basicFetch(`movie/${id}?language=${LANGUAGE}&api_key=${API_KEY}`);\n        }\n\n        return info;\n    }\n}","import React from \"react\";\nimport './Header.css'\n\nexport default ({dark}) => {\n    return (\n        <header className={dark ? 'dark' : ''}>\n            <div className=\"header--logo\">\n                <a href=\"/\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Logonetflix.png\" />\n                </a>\n            </div>\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" />\n                </a>\n            </div>\n                        \n        </header>\n    )   \n}","import React, { useState } from \"react\";\nimport './MovieRow.css';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\n\nexport default ({title, items, changeFeaturedMovie}) => {\n    const [scrollX, setScrollX] = useState(0);\n\n    const handleLeftArrow = () => {\n        let x = scrollX + Math.round(window.innerWidth / 2);\n        if(x > 0) {\n            x = 0;\n        }\n        setScrollX(x)\n    }\n\n    const handleRightArrow = () => {\n        let x = scrollX - Math.round(window.innerWidth / 2);\n        let listWidth = items.results.length * 150;\n        if((window.innerWidth - listWidth) > x) {\n            x = (window.innerWidth - listWidth) - 60;\n        }\n        setScrollX(x)\n    }\n\n    return (\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\n                <NavigateBeforeIcon style={{fontSize: 50}} />\n            </div>\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\n                <NavigateNextIcon style={{fontSize: 50}} />\n            </div>\n            <div className=\"movieRow--listarea\">\n                <div className=\"movieRow--list\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                }}>\n                    {items.results.length > 0 && items.results.map((item, key) => (\n                        <div key={key} className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} onClick={() => changeFeaturedMovie(item)} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n} ","import React from \"react\";\nimport './FeaturedMovie.css';\n\nexport default ({item}) => {\n    console.log('item', item)\n    let firstDate = item.first_air_date ? new Date(item.first_air_date) : new Date(item.release_date);\n    let genres = item?.genres.map(i => i.name).join(', ')\n    \n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">{item.original_name}</div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item?.number_of_seasons ? item.number_of_seasons + ` temporada${item.number_of_seasons !== 1 ? 's' : ''}` : ''}</div>\n                    </div>\n                    <div className=\"featured--description\">{item.overview}</div>\n                    <div className=\"featured--buttons\">\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\n                    </div>\n                    <div className=\"featured--genres\">\n                        <strong>Gêneros: </strong>{genres}\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport './App.css'\nimport MovieDB from './MovieDB';\nimport Header from './components/Header';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [darkHeader, setDarkHeader] = useState(false);\n  \n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await MovieDB.getHomeList();\n      \n      setMovieList(list);\n      setRandomFeaturedMovie(list);\n    }\n\n    loadAll();\n  }, []);\n\n  const setFeaturedMovie = async (featuredMovie) => {\n    console.log('featuredMovie', featuredMovie)\n    const mediaType = featuredMovie?.media_type === 'movie' ? 'movie' : 'tv'\n    let featuredMovieInfo = await MovieDB.getMovieInfo(featuredMovie.id, mediaType)\n    console.log('featuredMovieInfo', featuredMovieInfo)\n    \n    setFeaturedData(featuredMovieInfo);\n  }\n\n  const setRandomFeaturedMovie = (list) => {\n    let originals = list.filter(item => item.slug === 'originals');\n    let randomItem = Math.floor(Math.random() * (originals[0].items.results.length -1));\n    let featuredMovie = originals[0].items.results[randomItem];\n      \n    setFeaturedMovie(featuredMovie);\n  }\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setDarkHeader(true);\n      } else {\n        setDarkHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, []);\n\n\n  return (\n    <div className=\"page\">\n\n      <Header dark={darkHeader} />\n\n      {featuredData && \n        <FeaturedMovie item={featuredData} />\n      }      \n\n      <section className=\"lists\">\n        {movieList.map((item, key)=>(\n          <MovieRow key={key} title={item.title} items={item.items} changeFeaturedMovie={setFeaturedMovie} />\n        ))}\n      </section>\n\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"heart\">❤️</span><br />\n        Direitos de imagem para Netflix<br />\n        Dados obtidos pela API do TMDB (themoviedb.org)\n      </footer>\n      {movieList.length <= 0 &&  \n        <div className=\"loading\">\n          <img src=\"https://media.wired.com/photos/592744d3f3e2356fd800bf00/master/w_500/Netflix_LoadTime.gif\" alt=\"loading...\"/>\n        </div>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}